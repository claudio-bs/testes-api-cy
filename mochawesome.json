{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2024-01-30T13:22:05.036Z",
    "end": "2024-01-30T13:22:05.321Z",
    "duration": 285,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3398ce70-3674-4bee-b675-abf158ecf377",
      "title": "",
      "fullFile": "cypress\\e2e\\exercicio-api.cy.js",
      "file": "cypress\\e2e\\exercicio-api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "951360fe-4792-494f-a7cc-dc7797398ba9",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 63,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('usuarios').then(response => {\n  return _usuarios.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "1d688cdc-d994-4e10-bb96-fcde69390f4f",
              "parentUUID": "951360fe-4792-494f-a7cc-dc7797398ba9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'usuarios'\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('usuarios');\n  expect(response.duration).to.be.lessThan(20);\n});",
              "err": {},
              "uuid": "92582230-fb8d-497a-99e0-bc29e18013ec",
              "parentUUID": "951360fe-4792-494f-a7cc-dc7797398ba9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = `usuario` + `${Math.floor(Math.random() * 100000000)}`;\nlet email = `${usuario}@ebac.com.br`;\ncy.request({\n  method: 'POST',\n  url: 'usuarios',\n  headers: {\n    authorization: token\n  },\n  body: {\n    \"nome\": usuario,\n    \"email\": email,\n    \"password\": \"teste\",\n    \"administrador\": \"false\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "f81c8d86-af41-47a4-aad5-ee9b06a154bf",
              "parentUUID": "951360fe-4792-494f-a7cc-dc7797398ba9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = `usuario` + `${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarUsuario(token, usuario, \"beltrano@qa.com.br\", \"teste\", \"false\").then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal(\"Este email já está sendo usado\");\n});",
              "err": {},
              "uuid": "b855e34d-4f37-493c-bfb0-eeafd1b479a5",
              "parentUUID": "951360fe-4792-494f-a7cc-dc7797398ba9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = `usuario` + `${Math.floor(Math.random() * 100000000)}`;\nlet email = `${usuario}@ebac.com.br`;\ncy.cadastrarUsuario(token, usuario, email, \"teste\", \"false\").then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `usuarios/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": \"Usuário Editado\",\n      \"email\": email,\n      \"password\": \"teste\",\n      \"administrador\": \"false\"\n    }\n  }).then(response => {\n    expect(response.status).to.equal(200);\n    expect(response.body.message).to.equal(\"Registro alterado com sucesso\");\n  });\n});",
              "err": {},
              "uuid": "8889c62d-85bb-4460-a7fc-b3fcaead9b89",
              "parentUUID": "951360fe-4792-494f-a7cc-dc7797398ba9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = `usuario` + `${Math.floor(Math.random() * 100000000)}`;\nlet email = `${usuario}@ebac.com.br`;\ncy.cadastrarUsuario(token, usuario, email, \"teste\", \"false\").then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: \"DELETE\",\n    url: `usuarios/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.status).to.equal(200);\n    expect(response.body.message).to.equal(\"Registro excluído com sucesso\");\n  });\n});",
              "err": {},
              "uuid": "de3bca50-1f83-4d2b-93b2-e9b330ef3a50",
              "parentUUID": "951360fe-4792-494f-a7cc-dc7797398ba9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d688cdc-d994-4e10-bb96-fcde69390f4f",
            "92582230-fb8d-497a-99e0-bc29e18013ec",
            "f81c8d86-af41-47a4-aad5-ee9b06a154bf",
            "b855e34d-4f37-493c-bfb0-eeafd1b479a5",
            "8889c62d-85bb-4460-a7fc-b3fcaead9b89",
            "de3bca50-1f83-4d2b-93b2-e9b330ef3a50"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 193,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}